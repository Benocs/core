#
# CORE
# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.
#
# author: Jeff Ahrenholz <jeffrey.m.ahrenholz@boeing.com>
#
'''
quagga.py: defines routing services provided by Quagga.
'''

import os

if os.uname()[0] == "Linux":
    from core.netns import nodes
elif os.uname()[0] == "FreeBSD":
    from core.bsd import nodes
from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, isIPv4Address, isIPv6Address
from core.api import coreapi
from core.constants import *

QUAGGA_USER="root"
QUAGGA_GROUP="root"
if os.uname()[0] == "FreeBSD":
    QUAGGA_GROUP="wheel"

class Zebra(CoreService):
    '''
    '''
    _name = "zebra"
    _group = "Quagga"
    _depends = ("vtysh", )
    _dirs = ("/usr/local/etc/quagga",  "/var/run/quagga")
    _configs = ("/usr/local/etc/quagga/Quagga.conf",
                "quaggaboot.sh","/usr/local/etc/quagga/vtysh.conf")
    _startindex = 35
    _startup = ("sh quaggaboot.sh zebra",)
    _shutdown = ("killall zebra", )
    _validate = ("pidof zebra", )

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return the Quagga.conf or quaggaboot.sh file contents.
        '''
        if filename == cls._configs[0]:
            return cls.generateQuaggaConf(node, services)
        elif filename == cls._configs[1]:
            return cls.generateQuaggaBoot(node, services)
        elif filename == cls._configs[2]:
            return cls.generateVtyshConf(node, services)
        else:
            raise ValueError

    @classmethod
    def generateVtyshConf(cls, node, services):
        ''' Returns configuration file text.
        '''
        return "service integrated-vtysh-config"

    @classmethod
    def generateQuaggaConf(cls, node, services):
        ''' Returns configuration file text. Other services that depend on zebra
           will have generatequaggaifcconfig() and generatequaggaconfig()
           hooks that are invoked here.
        '''
        # we could verify here that filename == Quagga.conf
        cfg = ""
        for ifc in node.netifs():
            # do not ever include control interfaces in anything
            if hasattr(ifc, 'control') and ifc.control == True:
            #    cfg += "  "
            #    cfg += "\n  ".join(map(cls.addrstr, ifc.addrlist))
            #    cfg += "\n"
                continue

            cfg += "interface %s\n" % ifc.name

            cfgv4 = ""
            cfgv6 = ""
            want_ipv4 = False
            want_ipv6 = False
            for s in services:
                if cls._name not in s._depends:
                    continue
                # do not ever include control interfaces in anything
                if hasattr(ifc, 'control') and ifc.control == True:
                    continue
                ifccfg = s.generatequaggaifcconfig(node,  ifc)
                if s._ipv4_routing:
                    want_ipv4 = True
                if s._ipv6_routing:
                    want_ipv6 = True
                    cfgv6 += ifccfg
                else:
                    cfgv4 += ifccfg

            if want_ipv4:
                ipv4list = [x for x in ifc.addrlist if isIPv4Address(x.split('/')[0])]
                cfg += "  "
                cfg += "\n  ".join(map(cls.addrstr, ipv4list))
                cfg += "\n"
                cfg += cfgv4
            if want_ipv6:
                ipv6list = [x for x in ifc.addrlist if isIPv6Address(x.split('/')[0])]
                cfg += "  "
                cfg += "\n  ".join(map(cls.addrstr, ipv6list))
                cfg += "\n"
                cfg += cfgv6
            if not want_ipv4 and not want_ipv6:
                cfg += ifccfg
            cfg += "!\n"

        for s in services:
            if cls._name not in s._depends:
                continue
            cfg += s.generatequaggaconfig(node)
        return cfg

    @staticmethod
    def addrstr(x):
        ''' helper for mapping IP addresses to zebra config statements
        '''
        if x.find(".") >= 0:
            return "ip address %s" % x
        elif x.find(":") >= 0:
            return "ipv6 address %s" % x
        else:
            raise Value("invalid address: %s").with_traceback(x)

    @classmethod
    def generateQuaggaBoot(cls, node, services):
        ''' Generate a shell script used to boot the Quagga daemons.
        '''
        try:
            quagga_bin_search = node.session.cfg['quagga_bin_search']
            quagga_sbin_search = node.session.cfg['quagga_sbin_search']
        except KeyError:
            quagga_bin_search = '"/usr/local/bin /usr/bin /usr/lib/quagga"'
            quagga_sbin_search = '"/usr/local/sbin /usr/sbin /usr/lib/quagga"'
        return """\
#!/bin/sh
# auto-generated by zebra service (quagga.py)
QUAGGA_CONF=%s
QUAGGA_SBIN_SEARCH=%s
QUAGGA_BIN_SEARCH=%s
QUAGGA_STATE_DIR=%s
QUAGGA_USER=%s
QUAGGA_GROUP=%s

searchforprog()
{
    prog=$1
    searchpath=$@
    ret=
    for p in $searchpath; do
        if [ -x $p/$prog ]; then
            ret=$p
            break
        fi
    done
    echo $ret
}

confcheck()
{
    CONF_DIR=`dirname $QUAGGA_CONF`
    # if /etc/quagga exists, point /etc/quagga/Quagga.conf -> CONF_DIR
    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/Quagga.conf ]; then
        ln -s $CONF_DIR/Quagga.conf /etc/quagga/Quagga.conf
    fi
    # if /etc/quagga exists, point /etc/quagga/vtysh.conf -> CONF_DIR
    if [ "$CONF_DIR" != "/etc/quagga" ] && [ -d /etc/quagga ] && [ ! -e /etc/quagga/vtysh.conf ]; then
        ln -s $CONF_DIR/vtysh.conf /etc/quagga/vtysh.conf
    fi
}

waitforvtyfiles()
{
    for f in "$@"; do
        count=1
        until [ -e $QUAGGA_STATE_DIR/$f ]; do
            if [ $count -eq 10 ]; then
                echo "ERROR: vty file not found: $QUAGGA_STATE_DIR/$f" >&2
                return 1
            fi
            sleep 0.1
            count=$(($count + 1))
        done
    done
}

bootdaemon()
{
    QUAGGA_SBIN_DIR=$(searchforprog $1 $QUAGGA_SBIN_SEARCH)
    if [ "z$QUAGGA_SBIN_DIR" = "z" ]; then
        echo "ERROR: Quagga's '$1' daemon not found in search path:"
        echo "  $QUAGGA_SBIN_SEARCH"
        return 1
    fi

    if [ "$1" != "zebra" ]; then
        waitforvtyfiles zebra.vty
    fi

    $QUAGGA_SBIN_DIR/$1 -u $QUAGGA_USER -g $QUAGGA_GROUP -d
}

bootvtysh()
{
    QUAGGA_BIN_DIR=$(searchforprog $1 $QUAGGA_BIN_SEARCH)
    if [ "z$QUAGGA_BIN_DIR" = "z" ]; then
        echo "ERROR: Quagga's '$1' daemon not found in search path:"
        echo "  $QUAGGA_SBIN_SEARCH"
        return 1
    fi

    vtyfiles="zebra.vty"
    for r in rip ripng ospf6 ospf bgp babel; do
        if grep -q "^router \<${r}\>" $QUAGGA_CONF; then
            vtyfiles="$vtyfiles ${r}d.vty"
        fi
    done

    # wait for Quagga daemon vty files to appear before invoking vtysh
    waitforvtyfiles $vtyfiles

    $QUAGGA_BIN_DIR/vtysh -b
}

confcheck
if [ "x$1" = "x" ]; then
    echo "ERROR: missing the name of the Quagga daemon to boot"
    exit 1
elif [ "$1" = "vtysh" ]; then
    bootvtysh $1
else
    bootdaemon $1
fi
""" % (cls._configs[0], quagga_sbin_search, quagga_bin_search, \
       QUAGGA_STATE_DIR, QUAGGA_USER, QUAGGA_GROUP)

addservice(Zebra)

class QuaggaService(CoreService):
    ''' Parent class for Quagga services. Defines properties and methods
        common to Quagga's routing daemons.
    '''
    _name = "QuaggaDaemon"
    _group = "Quagga"
    _depends = ("zebra", )
    _dirs = ()
    _configs = ()
    _startindex = 40
    _startup = ()
    _shutdown = ()
    _meta = "The config file for this service can be found in the Zebra service."

    _ipv4_routing = False
    _ipv6_routing = False

    @staticmethod
    def routerid(node):
        ''' Helper to return the first IPv4 address of a node as its router ID.
        '''
        for ifc in node.netifs():
            if hasattr(ifc, 'control') and ifc.control == True:
                continue
            for a in ifc.addrlist:
                if a.find(".") >= 0:
                    return a .split('/') [0]
        #raise ValueError,  "no IPv4 address found for router ID"
        return "0.0.0.0"

    @staticmethod
    def rj45check(ifc):
        ''' Helper to detect whether interface is connected an external RJ45
        link.
        '''
        if ifc.net:
            for peerifc in ifc.net.netifs():
                if peerifc == ifc:
                    continue
                if isinstance(peerifc, nodes.RJ45Node):
                    return True
        return False

    @classmethod
    def generateconfig(cls,  node, filename, services):
        return ""

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        return ""

    @classmethod
    def generatequaggaconfig(cls,  node):
        return ""

class Ospfv2(QuaggaService):
    ''' The OSPFv2 service provides IPv4 routing for wired networks. It does
        not build its own configuration file but has hooks for adding to the
        unified Quagga.conf file.
    '''
    _name = "OSPFv2"
    _startup = ("sh quaggaboot.sh ospfd",)
    _shutdown = ("killall ospfd", )
    _validate = ("pidof ospfd", )
    _ipv4_routing = True

    @staticmethod
    def mtucheck(ifc):
        ''' Helper to detect MTU mismatch and add the appropriate OSPF
        mtu-ignore command. This is needed when e.g. a node is linked via a
        GreTap device.
        '''
        if ifc.mtu != 1500:
            # a workaround for PhysicalNode GreTap, which has no knowledge of
            # the other nodes/nets
            return "  ip ospf mtu-ignore\n"
        if not ifc.net:
            return ""
        for i in ifc.net.netifs():
            if i.mtu != ifc.mtu:
                return "  ip ospf mtu-ignore\n"
        return ""

    @staticmethod
    def ptpcheck(ifc):
        ''' Helper to detect whether interface is connected to a notional
        point-to-point link.
        '''
        if isinstance(ifc.net, nodes.PtpNet):
            return "  ip ospf network point-to-point\n"
        return ""

    @classmethod
    def generatequaggaconfig(cls, node):
        cfg = "!\n! OSPFv2 (for IPv4) configuration\n!\n"
        cfg += "router ospf\n"
        cfg += "  router-id %s\n" % cls.routerid(node)
        cfg += "  redistribute connected\n"
        cfg += "  redistribute bgp\n"
        cfg += "!\n"

        return cfg

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        # do not include control interfaces
        if hasattr(ifc, 'control') and ifc.control == True:
            return ""

        cfg = cls.mtucheck(ifc)

        # find any link on which two equal netid's (i.e., AS numbers) are
        # present and configure an ospf-session on this interface
        # on all other interfaces, disable ospf
        for idx, net_netif in ifc.net._netif.items():

            # skip our own interface
            if ifc == net_netif:
                continue

            # found the same AS, enable IGP/OSPF
            if node.netid == net_netif.node.netid:
                for a in ifc.addrlist:
                    if a.find(".") < 0:
                        continue
                    cfg += "  network %s area 0\n" % a
        cfg += "!\n"
        return cfg

        #cfg = cls.mtucheck(ifc)
        # external RJ45 connections will use default OSPF timers
        #if cls.rj45check(ifc):
        #    return cfg
        #cfg += cls.ptpcheck(ifc)

        #return cfg + """\
#  ip ospf hello-interval 2
#  ip ospf dead-interval 6
#  ip ospf retransmit-interval 5
#"""

addservice(Ospfv2)

class Ospfv3(QuaggaService):
    ''' The OSPFv3 service provides IPv6 routing for wired networks. It does
        not build its own configuration file but has hooks for adding to the
        unified Quagga.conf file.
    '''
    _name = "OSPFv3"
    _startup = ("sh quaggaboot.sh ospf6d",)
    _shutdown = ("killall ospf6d", )
    _validate = ("pidof ospf6d", )
    _ipv4_routing = True
    _ipv6_routing = True

    @staticmethod
    def minmtu(ifc):
        ''' Helper to discover the minimum MTU of interfaces linked with the
        given interface.
        '''
        mtu = ifc.mtu
        if not ifc.net:
            return mtu
        for i in ifc.net.netifs():
            if i.mtu < mtu:
                mtu = i.mtu
        return mtu

    @classmethod
    def mtucheck(cls, ifc):
        ''' Helper to detect MTU mismatch and add the appropriate OSPFv3
        ifmtu command. This is needed when e.g. a node is linked via a
        GreTap device.
        '''
        minmtu = cls.minmtu(ifc)
        if minmtu < ifc.mtu:
            return "  ipv6 ospf6 ifmtu %d\n" % minmtu
        else:
            return ""

    @staticmethod
    def ptpcheck(ifc):
        ''' Helper to detect whether interface is connected to a notional
        point-to-point link.
        '''
        if isinstance(ifc.net, nodes.PtpNet):
            return "  ipv6 ospf6 network point-to-point\n"
        return ""

    @classmethod
    def generatequaggaconfig(cls,  node):
        cfg = "router ospf6\n"
        rtrid = cls.routerid(node)
        cfg += "  router-id %s\n" % rtrid
        cfg += "!\n"
        return cfg

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        if hasattr(ifc, 'control') and ifc.control == True:
            return ""

        cfg = cls.mtucheck(ifc)
        cfg += "  interface %s area 0.0.0.0\n" % ifc.name
        return cfg

        #cfg = cls.mtucheck(ifc)
        # external RJ45 connections will use default OSPF timers
        #if cls.rj45check(ifc):
        #    return cfg
        #cfg += cls.ptpcheck(ifc)

        #return cfg + """\
#  ipv6 ospf6 hello-interval 2
#  ipv6 ospf6 dead-interval 6
#  ipv6 ospf6 retransmit-interval 5
#"""

addservice(Ospfv3)

class Ospfv3mdr(Ospfv3):
    ''' The OSPFv3 MANET Designated Router (MDR) service provides IPv6
        routing for wireless networks. It does not build its own
        configuration file but has hooks for adding to the
        unified Quagga.conf file.
    '''
    _name = "OSPFv3MDR"
    _ipv4_routing = True

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        cfg = cls.mtucheck(ifc)

        return cfg + """\
  ipv6 ospf6 instance-id 65
  ipv6 ospf6 hello-interval 2
  ipv6 ospf6 dead-interval 6
  ipv6 ospf6 retransmit-interval 5
  ipv6 ospf6 network manet-designated-router
  ipv6 ospf6 diffhellos
  ipv6 ospf6 adjacencyconnectivity uniconnected
  ipv6 ospf6 lsafullness mincostlsa
"""

addservice(Ospfv3mdr)

class Bgp(QuaggaService):
    '''' The BGP service provides interdomain routing.
        Peers must be manually configured, with a full mesh for those
        having the same AS number.
    '''
    _name = "BGP"
    _startup = ("sh quaggaboot.sh bgpd",)
    _shutdown = ("killall bgpd", )
    _validate = ("pidof bgpd", )
    _custom_needed = False
    _ipv4_routing = True
    _ipv6_routing = True

    @classmethod
    def generatequaggaconfig(cls, node):

        cfg = "!\n! BGP configuration\n!\n"
        cfg += "router bgp %s\n" % node.netid
        cfg += "  bgp router-id %s\n" % cls.routerid(node)
        cfg += "  redistribute connected\n"
        cfg += "  redistribute ospf\n"
        cfg += "  redistribute isis\n"

        #cfg += "   redistribute system\n"
        #cfg += "   redistribute kernel\n"
        #cfg += "   redistribute connected\n"
        #cfg += "   redistribute static\n"
        #cfg += "   redistribute rip\n"
        #cfg += "   redistribute ripng\n"
        #cfg += "   redistribute ospf\n"
        #cfg += "   redistribute ospf6\n"
        #cfg += "   redistribute isis\n"
        #cfg += "   redistribute hsls\n"
        cfg += "!\n"
        # aggregate networks that are being used for internal transit and access
        # TODO: find a more generic way. this approach works well for
        # two-AS-networks. ideally, each network should only aggregate the address
        # space that it allocates to it's client or the space that is being used by
        # it's internal routers (i.e., IGP, non-EGP)

        #cfg += "  aggregate-address 172.16.0.0 255.240.0.0 summary-only\n"
        #cfg += "  aggregate-address 192.168.0.0 255.255.0.0 summary-only\n"

        # don't aggregate networks that are being used for inter-AS routing
        #cfg += "  aggregate-address 10.0.0.0 255.0.0.0 summary-only\n!\n"
        cfg += "!\n"

        # find any link on which two different netid's (i.e., AS numbers) are
        # present and configure a bgp-session between the two corresponding nodes.
        # on all other interfaces, disable bgp
        for localnetif in node.netifs():
            #print('\nnetif: %s ' % str(localnetif))
            #print('localnetif net: %s ' % str(localnetif.net))

            # do not include control interfaces
            if hasattr(localnetif, 'control') and localnetif.control == True:
                continue

            for idx, net_netif in localnetif.net._netif.items():
                #print('idx: %s, %s' % (str(idx), str(net_netif)))
                candidate_node = net_netif.node
                #print('candidate node: %s, netid: %s' % (str(candidate_node),
                #       str(candidate_node.netid)))

                # skip our own interface
                if localnetif == net_netif.node:
                    continue

                # found at least two different ASes.
                if not node.netid == net_netif.node.netid:
                    #print('found two different ASes: local: %s, remote: %s' %
                    #       (str(node.netid), str(net_netif.node.netid)))

                    # TODO: break after first link with this neighbor is established?
                    for addr in net_netif.addrlist:
                        (ip, sep, mask)  = addr.partition('/')
                        #print('configuring BGP neighbor: %s' % str(ip))

                        cfg += "  neighbor %s remote-as %s\n" % \
                                (str(ip), str(net_netif.node.netid))

        return cfg

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        if hasattr(ifc, 'control') and ifc.control == True:
            return ""

        cfg = ""
        # find any link on which two different netid's (i.e., AS numbers) are
        # present and configure a bgp-session between the two corresponding nodes.
        # on all other interfaces, disable bgp
        for idx, net_netif in ifc.net._netif.items():
            #print('idx: %s, %s' % (str(idx), str(net_netif)))
            candidate_node = net_netif.node
            #print('candidate node: %s, netid: %s' % (str(candidate_node),
            #       str(candidate_node.netid)))

            # skip our own interface
            if ifc == net_netif.node:
                continue

            # found at least two different ASes.
            if not node.netid == net_netif.node.netid:
                #print('found two different ASes: local: %s, remote: %s' %
                #       (str(node.netid), str(net_netif.node.netid)))

                # TODO: break after first link with this neighbor is established?
                for addr in net_netif.addrlist:
                    (ip, sep, mask)  = addr.partition('/')
                    #print('configuring BGP neighbor: %s' % str(ip))

                    cfg += "  neighbor %s remote-as %s\n" % \
                            (str(ip), str(net_netif.node.netid))

        return cfg

addservice(Bgp)

class Rip(QuaggaService):
    ''' The RIP service provides IPv4 routing for wired networks.
    '''
    _name = "RIP"
    _startup = ("sh quaggaboot.sh ripd",)
    _shutdown = ("killall ripd", )
    _validate = ("pidof ripd", )
    _ipv4_routing = True

    @classmethod
    def generatequaggaconfig(cls,  node):
        cfg = """\
router rip
  redistribute static
  redistribute connected
  redistribute ospf
  network 0.0.0.0/0
!
"""
        return cfg

addservice(Rip)

class Ripng(QuaggaService):
    ''' The RIP NG service provides IPv6 routing for wired networks.
    '''
    _name = "RIPNG"
    _startup = ("sh quaggaboot.sh ripngd",)
    _shutdown = ("killall ripngd", )
    _validate = ("pidof ripngd", )
    _ipv6_routing = True

    @classmethod
    def generatequaggaconfig(cls,  node):
        cfg = """\
router ripng
  redistribute static
  redistribute connected
  redistribute ospf6
  network ::/0
!
"""
        return cfg

addservice(Ripng)

class Babel(QuaggaService):
    ''' The Babel service provides a loop-avoiding distance-vector routing
    protocol for IPv6 and IPv4 with fast convergence properties.
    '''
    _name = "Babel"
    _startup = ("sh quaggaboot.sh babeld",)
    _shutdown = ("killall babeld", )
    _validate = ("pidof babeld", )
    _ipv6_routing = True

    @classmethod
    def generatequaggaconfig(cls,  node):
        cfg = "router babel\n"
        for ifc in node.netifs():
            if hasattr(ifc, 'control') and ifc.control == True:
                continue
            cfg += "  network %s\n" % ifc.name
        cfg += "  redistribute static\n  redistribute connected\n"
        return cfg

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        type = "wired"
        if ifc.net and ifc.net.linktype == coreapi.CORE_LINK_WIRELESS:
            return "  babel wireless\n  no babel split-horizon\n"
        else:
            return "  babel wired\n  babel split-horizon\n"

addservice(Babel)

class ISIS(QuaggaService):
    ''' The user generated service isisd provides a ISIS!
    '''
    _name = "ISIS"
    _startup = ("sh quaggaboot.sh isisd",)
    _shutdown = ("killall isisd", )
    _validate = ("pidof isisd", )

    @classmethod
    def generatequaggaifcconfig(cls,  node,  ifc):
        added_ifc = False

        # do not include control interfaces
        if hasattr(ifc, 'control') and ifc.control == True:
            return ""

        cfg = ""

        # find any link on which two equal netid's (i.e., AS numbers) are
        # present and configure an isis-session on this interface
        # on all other interfaces, disable isis
        for idx, net_netif in ifc.net._netif.items():

            # only add each interface once
            if added_ifc:
                break

            # skip our own interface
            if ifc == net_netif:
                continue

            # found the same AS, enable IGP/ISIS
            if not added_ifc and node.netid == net_netif.node.netid:
                #cfg += "interface %s\n" % ifc.name
                cfg += "  ip router isis 1\n"
                cfg += "  isis circuit-type level-2-only\n"
                cfg += "  isis network point-to-point\n"
                cfg += "!\n"
                # only add each interface once
                added_ifc = True

        return cfg


    @classmethod
    def generatequaggaconfig(cls, node):
        cfg = "!\n! ISIS configuration\n!\n"
        cfg += "log file /tmp/isis-%s.log debugging\n" % cls.routerid(node)
        cfg += "interface lo\n"
        cfg += " ip router isis 1\n"
        cfg += " isis network point-to-point\n"
        cfg += "!\n"

        cfg += "router isis 1\n"
        #cfg += " isis network point-to-point\n"
        # TODO  loesung aendern damit er nicht die ip vom ctrl netz nimmt...
        # TODO geht so nur wenn ipv4 adresse vorhanden
        #cfg += "  net 49.%s.00\n" % cls.bearbeiteipstr(cls.routerid(node))
        cfg += "  net %s\n" % cls.bearbeiteipstr(cls.routerid(node), str(node.netid))
        #cfg += " is-type level-2\n!\n"
        # TODO: redistribution of routes is not yet implemented in quagga
        #cfg += "  redistribute connected\n"
        #cfg += "  redistribute bgp\n"
        cfg += "!\n"

        return cfg

    @staticmethod
    def bearbeiteipstr(ipstr, netid):
        ''' get ip return three middle blocks of isis netid
        '''
        """
        # isis-is is 12 characters long
        # it has the format: 49.nnnn.aaaa.bbbb.cccc.00
        # where nnnn == netid (i.e., same on all routers)
        #       abc  == routerid (i.e., unique among all routers)

        hexip = hex(int(ipaddress.IPv4Address(ipstr)))[2:]
        if len(hexip) < 8:
            hexip = '0%s' % hexip

        netid = str(netid)
        isisnetidlist = [ '0' for i in range(4 - len(netid)) ]
        isisnetidlist.append(netid)
        isisnetid = ''.join(isisnetidlist)

        # 49.1000.
        #isisid = "49.%s.%s.%s.0000.00" % (isisnetid, hexip[:4], hexip[4:])
        isisid = "49.%s.%s.%s.0000.00" % (hexip[4:], hexip[:4], hexip[4:])
        #return isisid
        """

        # punkte entfernen
        temp =  ''.join(c for c in ipstr if c not in '.')
        # laenge auffuellen TODO schauen ob so immer richtig
        while len(temp) < 12:
            temp += str(12-len(temp))
        # punkte an richtiger stelle einfuegen und zurueckliefern
        return '49.' + temp[:4] + '.' + temp[4:8] + '.' + temp[8:] + '.00'

addservice(ISIS)


class Vtysh(CoreService):
    ''' Simple service to run vtysh -b (boot) after all Quagga daemons have
        started.
    '''
    _name = "vtysh"
    _group = "Quagga"
    _startindex = 45
    _startup = ("sh quaggaboot.sh vtysh",)
    _shutdown = ()
    _starttime = 5

    @classmethod
    def generateconfig(cls, node, filename, services):
        return ""

addservice(Vtysh)

