# Constants created by autoconf ./configure script
COREDPY_VERSION		= "@COREDPY_VERSION@"
CORE_STATE_DIR		= "@CORE_STATE_DIR@"
CORE_CONF_DIR		= "@CORE_CONF_DIR@"
CORE_DATA_DIR		= "@CORE_DATA_DIR@"
CORE_LIB_DIR		= "@CORE_LIB_DIR@"
CORE_SBIN_DIR		= "@SBINDIR@"

BRCTL_BIN               = "@brctl_path@/brctl"
SYSCTL_BIN              = "@sysctl_path@/sysctl"
IP_BIN                  = "@ip_path@/ip"
TC_BIN                  = "@tc_path@/tc"
EBTABLES_BIN            = "@ebtables_path@/ebtables"
IFCONFIG_BIN            = "@ifconfig_path@/ifconfig"
NGCTL_BIN               = "@ngctl_path@/ngctl"
VIMAGE_BIN              = "@vimage_path@/vimage"
QUAGGA_STATE_DIR        = "@CORE_STATE_DIR@/run/quagga"
MOUNT_BIN               = "@mount_path@/mount"
UMOUNT_BIN              = "@umount_path@/umount"
# TODO: make UNIONFS_BIN dynamic
#UNIONFS_BIN             = "@unionfs_path@/unionfs-fuse"
UNIONFS_BIN             = "/usr/bin/unionfs-fuse"

from os.path import exists, expanduser, join

CONFIGS = {}
# since this is the core-daemon, user should always expand to /root/
home = expanduser('~')
#dotcore = join(home, '.core')
dotcore = '/etc/core'

class KeyValueConf():
    @staticmethod
    def parse(filename):
        localconfig = {}
        with open(filename, 'r') as f:
            for line in f:
                try:
                    key_value = line.split('=')
                    if not len(key_value) == 2:
                        print('ERROR: could not read line: %s' % line)
                        continue

                    key = key_value[0].replace('"', '').replace("'", "").strip()
                    value = key_value[1].replace('"', '').replace("'", "").strip()

                    localconfig[key] = value
                except:
                    print('ERROR: could not read line: %s' % line)
        return localconfig

class IPAddrsConf(KeyValueConf):
    pass

class CoreConf():
    pass

class NodesConf():
    @staticmethod
    def parse(filename):
        localconfig = {}
        # per line states
        state = 0
        states = {
                0: 'idx',
                1: 'name',
                2: 'normal-icon',
                3: 'tiny-icon',
                4: 'services',
                5: 'type',
                6: 'metadata',
                }

        nodedef = None
        with open(filename, 'r') as f:
            for line in f:
                try:
                    line = line.strip()
                    if line.startswith('#'):
                        continue

                    # idx
                    nodedef = {}
                    nodekey = None
                    next_delimeter = line.find('{')
                    if next_delimeter == -1:
                        raise ValueError('malformed line: %' % line)
                    nodedef[states[state]] = line[:next_delimeter].strip()
                    line = line[next_delimeter:].strip()
                    state += 1

                    # name
                    if line.startswith('{') and line.endswith('}'):
                        line = line[1:-1].strip()
                        next_delimeter = line.find(' ')
                        if next_delimeter == -1:
                            raise ValueError('malformed line: %' % line)
                        nodedef[states[state]] = line[:next_delimeter].strip()
                        nodekey = nodedef[states[state]]
                        line = line[next_delimeter:].strip()
                        state += 1
                    else:
                        raise ValueError('malformed line: %' % line)

                    # normal-icon
                    next_delimeter = line.find(' ')
                    if next_delimeter == -1:
                        raise ValueError('malformed line: %' % line)
                    nodedef[states[state]] = line[:next_delimeter].strip()
                    line = line[next_delimeter:].strip()
                    state += 1

                    # tiny-icon
                    next_delimeter = line.find(' ')
                    if next_delimeter == -1:
                        raise ValueError('malformed line: %' % line)
                    nodedef[states[state]] = line[:next_delimeter].strip()
                    line = line[next_delimeter:].strip()
                    state += 1

                    # services
                    if not line.startswith('{'):
                        raise ValueError('malformed line: %' % line)
                    next_delimeter = line.find('}')
                    if next_delimeter == -1:
                        raise ValueError('malformed line: %' % line)
                    # remove '{' and '}'
                    services_line = line[1:next_delimeter].strip()
                    nodedef[states[state]] = services_line.split()
                    line = line[next_delimeter+1:].strip()
                    state += 1

                    # type
                    next_delimeter = line.find(' ')
                    if next_delimeter == -1:
                        raise ValueError('malformed line: %' % line)
                    nodedef[states[state]] = line[:next_delimeter].strip()
                    line = line[next_delimeter:].strip()
                    state += 1

                    # metadata
                    if not line.startswith('{'):
                        raise ValueError('malformed line: %' % line)
                    next_delimeter = line.find('}')
                    if next_delimeter == -1:
                        raise ValueError('malformed line: %' % line)
                    # remove '{' and '}'
                    nodedef[states[state]] = line[1:next_delimeter].strip()
                    line = line[next_delimeter+1:].strip()
                    state += 1

                    # done
                    if len(nodedef) > 0 and not nodekey is None:
                        localconfig[nodekey] = nodedef
                    state = 0
                except:
                    print('ERROR: could not read line: %s' % line)
        return localconfig

config_files = [
        #('core.conf', CoreConf),
        ('ipaddrs.conf', IPAddrsConf),
        ('nodes.conf', NodesConf),
        ]

for configfile, parsercls in config_files:
    fullpath = join(dotcore, configfile)
    configname = configfile[:configfile.rfind('.conf')]
    if exists(fullpath):
        localconfig = parsercls.parse(fullpath)
        if len(localconfig) > 0:
            CONFIGS[configname] = localconfig

