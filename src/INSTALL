#!/bin/bash

set -e

BUILD_PARALLEL="-j2"
CORECFG="/etc/core"
PYTHON=python3

export PYTHON
su -c "apt-get update; apt-get purge quagga snmpd libsnmp-dev; \
    apt-get install bash bridge-utils ebtables iproute libev-dev python \
    tcl8.5 tk8.5 libtk-img gawk libperl-dev \
    autoconf automake gcc libev-dev make libreadline-dev pkg-config \
    imagemagick help2man unionfs-fuse libpcap-dev \
    python3 python3-dev bind9 lighttpd \
    tmux" root

daemons="bind9 lighttpd"
su -c "(for daemon in $daemons; do \
            update-rc.d -f \$daemon remove || echo \"error while deactivating \
            \$daemon\'s \ init script. check output.\"; done)" root

./bootstrap.sh
./configure --prefix=/usr

make $BUILD_PARALLEL
#TODO: chmod -R 775 "$CORECFG" && \
su -c "make install && \
    mkdir -p "$CORECFG" && \
    chmod -R 777 "$CORECFG" && \
    addgroup core || echo \"group \\\"core\\\" already exists. this can be ignored\" && \
    chgrp -R core \"$CORECFG\" && \
    cp -v files/brite.conf \"$CORECFG/\" && \
    cp -v files/ipaddrs.conf \"$CORECFG/\" && \
    cp -v files/nodes.conf \"$CORECFG/\" && \
    cp -v files/pvfs.conf \"$CORECFG/\" && \
    cp -v files/widgets.conf \"$CORECFG/\" && \
    ln -s \"$CORECFG\" /root/.core || echo \"link already exists. this can be ignored\" && \
    (for i in /home/*; do \
        echo \"creating link in \"\$i\"\"; ln -s \"$CORECFG\" \"\$i/.core\" || \
        echo \"link already exists. this can be ignored\"; done)" root

echo "building and installing netsnmp..."
su -c "(cd ../contrib/snmp && \
    rm -rf net-snmp-5.7.2.1 && \
    tar -xzvf net-snmp-5.7.2.1.tar.gz && \
    cd net-snmp-5.7.2.1 && \
    ./configure --prefix=\"/usr\" --enable-new-features --enable-ipv6 \
        --with-default-snmp-version=\"3\" --with-sys-contact=\"Unknown\" \
        --with-sys-location=\"Unknown\" --with-logfile=\"/var/log/snmpd.log\" \
        --with-persistent-directory=\"/var/net-snmp\" && \
    make && \
    make install && \
    cd .. && \
    cp -v ./snmpd.init /etc/init.d/ && \
    update-rc.d -f snmpd remove)" root

echo "building and installing quagga..."
su -c "( cd ../contrib/quagga && \
    tar -xzf quagga-0.99.22.4.tar.gz && \
    cd quagga-0.99.22.4 && \
    patch -p1 < ../000-vtysh.patch && \
    patch -p1 < ../001-isis_pdu_iih.patch && \
    ./configure --prefix= \
        --enable-snmp \
        --enable-isisd \
        --enable-multipath=1 \
        --sysconfdir=/etc/quagga \
        --enable-vtysh \
        --localstatedir=/var/run/quagga && \
    make $BUILD_PARALLEL && \
    make install && \
    cd .. && \
    mkdir -p /etc/quagga && \
    cp -v ./debian.conf /etc/quagga/ && \
    cp -v ./quagga.init /etc/init.d/quagga && \
    update-rc.d -f quagga remove)" root

su -c "adduser --system --shell /bin/false --no-create-home --group --disabled-password --disabled-login quagga" root

echo "building and installing pmacct..."
(
cd ../contrib/pmacct
tar -xzf pmacct-1.5.0rc3.tar.gz
cd pmacct-1.5.0rc3
./configure --enable-l2 --enable-ipv6 --enable-plabel --enable-v4-mapped --enable-64bit --enable-threads --enable-ulog
make
su -c "make install" root
)

echo "building and installing softflowd"
(
cd ../contrib/
tar -xzf softflowd-80aac3b2fec3.tgz
cd softflowd
aclocal
autoheader
autoconf
./configure
make
su -c "make install" root
)

echo "building and installing BENOCS ifindex"
(
cd ../contrib/BENOCS/ifindex/src
g++ -o ifindex ifindex.cpp
su -c "mkdir -p /opt/BENOCS/bin && cp ifindex /opt/BENOCS/bin/ifindex" root
)

echo "Installing BRITE dependencies.."
su -c "apt-get install default-jre python-pydot" root

britedir=/usr/lib/brite
echo "Installing BRITE to ${britedir}.."
su -c "cp -ax ../contrib/BRITE ${britedir}" root

PYTHON=python3
PYTHON_MINOR=$(python3 -V 2>&1 | awk '{print $2}' | cut -d"." -f2)
DESTDIR="/usr"
pythondir="/lib/${PYTHON}.${PYTHON_MINOR}/dist-packages"
pyexecdir="/lib/${PYTHON}.${PYTHON_MINOR}/dist-packages"

echo "Installing core-topogen.."
su -c "(cd topogen && ${PYTHON} ./setup.py install --prefix=${DESTDIR} \
    --install-purelib=${DESTDIR}/${pythondir} \
    --install-platlib=${DESTDIR}/${pyexecdir})" root

echo "done. now for each user using core, create a symlink pointing from \"$HOME/.core\" -> \"$CORECFG\""

